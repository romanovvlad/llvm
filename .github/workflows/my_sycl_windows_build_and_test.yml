name: Checkout PR on comment

on:
  issue_comment:
    # triggers on created, edited and deleted by default, you may wanna restrict it, e.g.:
    #types: [created]

permissions:
  contents: read

jobs:
  pr-commented:
    name: PR commented
    if: github.event.issue.pull_request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        id: get-pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }
      - uses: actions/checkout@v2
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} # or .head.ref for branch name
  deploy3:
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout
        uses: actions/checkout@v2
      - name: Checkout Pull Request
        run: hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/deploy' }}
    steps:
    - name: Get PR SHA
      id: sha
      uses: actions/github-script@v4
      with:
        result-encoding: string
        script: |
          const { owner, repo, number } = context.issue;
          const pr = await github.pulls.get({
            owner,
            repo,
            pull_number: number,
          });
          return pr.data.head.sha
    - uses: actions/checkout@v2
      with:
        ref: ${{ steps.sha.outputs.result }}
    - name: React to comment
      uses: actions/github-script@v4
      with:
        script: |
          const {owner, repo} = context.issue;
          github.reactions.createForIssueComment({
            owner,
            repo,
            comment_id: context.payload.comment.id,
            content: "rocket",
          });
    - name: Fail randomly
      run: |
        cat README.md
        exit $((RANDOM % 2))
    - name: Message success
      if: ${{ success() }}
      uses: actions/github-script@v4
      with:
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Deployment succeeded! ✅',
          });
    - name: Message failure
      if: ${{ failure() }}
      uses: actions/github-script@v4
      with:
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Deployment failed! ❌',
          });

# name: Like pizza

# on:
#   issue_comment:
#     types:
#       - created

# permissions: read-all|write-all

# jobs:
#   lint:
#     runs-on: ubuntu-latest
#     container:
#       image: ghcr.io/intel/llvm/sycl_ubuntu2004_nightly:no-drivers
#     steps:
#     - name: 'PR commits + 1'
#       run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> "${GITHUB_ENV}"
#     - uses: actions/checkout@v3
#       with:
#         ref: ${{ github.event.pull_request.head.sha }}
#         persist-credentials: false
#         fetch-depth: ${{ env.PR_FETCH_DEPTH }}
#     - name: Run clang-format
#       uses: ./devops/actions/clang-format

  # like-pizza:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.comment.body == 'I like pizza'}}
  #   steps:
  #     - name: Like pizza
  #       uses: actions/github-script@v4
  #       with:
  #         script: |
  #           const {owner, repo} = context.issue
  #           github.reactions.createForIssueComment({
  #             owner,
  #             repo,
  #             comment_id: context.payload.comment.id,
  #             content: "+1",
  #           });
  #     - name: Github API Request
  #       id: request
  #       uses: octokit/request-action@v2.0.0
  #       with:
  #         route: ${{ github.event.issue.pull_request.url }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Checkout PR Branch
  #       uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         repository: ${{ fromJson(steps.request.outputs.data).head.repo.full_name }}
  #         ref: ${{ steps.pr_data.outputs.branch }}

  # build:
  #   name: Build + LIT
  #   runs-on: [Windows, build]
  #   # TODO use cached checkout
  #   steps:
  #   - uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
  #     with:
  #       arch: amd64
  #   - name: Set env
  #     run: |
  #       git config --system core.longpaths true
  #       git config --global core.autocrlf false
  #       echo "C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
  #       echo "SCCACHE_DIR=D:\github\_work\cache\${{ inputs.build_cache_suffix }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #   - uses: actions/checkout@v3
  #     with:
  #       path: src
  #       fetch-depth: 1
  #   - name: Register cleanup after job is finished
  #     uses: ./src/devops/actions/cleanup
  #   - name: Configure
  #     shell: cmd
  #     # TODO switch to clang-cl and lld when this is fixed https://github.com/oneapi-src/level-zero/issues/83
  #     run: |
  #       mkdir build
  #       mkdir install
  #       IF NOT EXIST D:\github\_work\cache MKDIR D:\github\_work\cache
  #       IF NOT EXIST D:\github\_work\cache\sycl_${{inputs.build_cache_suffix}} MKDIR D:\github\_work\cache\${{inputs.build_cache_suffix}}
  #       python.exe src/buildbot/configure.py -o build ^
  #         --ci-defaults ^
  #         --cmake-opt="-DCMAKE_C_COMPILER=cl" ^
  #         --cmake-opt="-DCMAKE_CXX_COMPILER=cl" ^
  #         --cmake-opt="-DCMAKE_INSTALL_PREFIX=%GITHUB_WORKSPACE%\install" ^
  #         --cmake-opt="-DCMAKE_CXX_COMPILER_LAUNCHER=sccache" ^
  #         --cmake-opt="-DCMAKE_C_COMPILER_LAUNCHER=sccache"
  #   - name: Build
  #     id: build
  #     run: |
  #       cmake --build build --target sycl-toolchain
  #       sccache --show-stats
  #   - name: check-llvm
  #     shell: bash
  #     if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
  #     run: |
  #       cmake --build build --target check-llvm
  #   - name: check-clang
  #     if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
  #     shell: bash
  #     run: |
  #       cmake --build build --target check-clang
  #   - name: check-sycl
  #     if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
  #     shell: bash
  #     run: |
  #       cmake --build build --target check-sycl
  #   - name: check-llvm-spirv
  #     if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
  #     shell: bash
  #     run: |
  #       cmake --build build --target check-llvm-spirv
  #   - name: check-xptifw
  #     if: ${{ always() && !cancelled() && steps.build.outcome == 'success' }}
  #     shell: bash
  #     run: |
  #       cmake --build build --target check-xptifw
  #   - name: Install
  #     shell: bash
  #     run: cmake --build build --target deploy-sycl-toolchain
  #   - name: Upload toolchain
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: sycl_windows_default
  #       path: install/**/*
